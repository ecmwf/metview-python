return: :class:`Bufr`, :class:`Geopoints` or :class:`Table`
summary: rst
oneliner: Filters and extracts BUFR data.
params:
- data:
    default: ''
    desc: The input data.
    ptype: :class:`Bufr`
    values: ''
- output:
    default: bufr
    desc: |-  
      Specifies the output format. The possible options are as follows:
        
      * "bufr": the output is a new :class:`Bufr`. Messages containing subsets are split with each subset forming an individual message in the output. Not all the filtering options are available in this mode. 
      * "geopoints": the output is a standard 6-column :class:`Geopoints`.
      * "polar_vector": the output is a :class:`Geopoints` with polar vector data.
      * "xy_vector": the output is a :class:`Geopoints` with xy vector data.
      * "ncols": the output is a :class:`Geopoints` with arbitrary number of data columns.
      * "csv": the output is a :class:`Table` containing only the parameters specified in ``parameter`` (no location, data, time and levels is extracted).
    ptype: str
    values: bufr/geopoints/polar_vector/xy_vector/ncols/csv
- parameter:
    default: '012004'
    desc: Specifies the parameters to be extracted by their ecCodes BUFR keynames. For
      compatibility the BUFR descriptors can still be given here but their usage is
      discouraged. Available when ``output`` is not "bufr".
    ptype: str or list[str]
    values: ''
- missing_data:
    default: ignore
    desc: If set to "ignore", missing data is not included in the ``output`` file.
      If set to "include", missing data will be written to the output file, its value being
      set to that specified by ``missing_data_value``. Note that when ``output`` is 
      one of the two geopoints vector formats, the test for missing data is only performed
      on the first ``parameter``. Available when ``output`` is not "bufr".
    ptype: str
    values: ignore/include
- missing_data_value:
    default: '3.0e+38'
    desc: Any missing observations will be written as this value. It is wise, therefore, to ensure
      that this value is outside the range of possible values for the requested parameter(s). Note
      that when ``output`` is one of the two geopoints vector formats, the test for missing data is
      only performed on the first ``parameter``. Available when ``output`` is not "bufr" and 
      ``missing_data`` is "include". 
    ptype: number
    values: ''
- level:
    default: surface
    desc: |-
      The possible values are as follows:
      
      * "surface": use this for surface observations (e.g. SYNOP)
      * "single": defines level filter by a single pressure value (e.g. TEMP)
      * "thickness": defines a pressure layer filter (e.g. TEMP)
      * "occurrence": defines a filter based on the occurrence of ``parameter`` within a BUFR message/subset
      * "descriptor_value": defines a filter based on the value of the ``level_descriptor`` parameter.
      * "descriptor_range": defines a filter based on the value range of the ``level_descriptor`` parameter.
      Available when ``output`` is not "bufr".
    ptype: str
    values: surface/single/thickness/occurrence/descriptor_value/descriptor_range
- level_descriptor:
    default: '07004'
    desc: Specifies the parameter defining the level when ``level`` is "descriptor_value" or "descriptor_range".
    ptype: str
    values: ''
- first_level:
    default: '30'
    desc: Specifies the first value for the ``level`` filter. If ``level`` is "single" or "thickness" this must
      be a pressure value given in hPa. If ``level`` is "thickness" this defines the bottom of the layer
      (towards the surface). If ``level`` is "descriptor_range" it sets the minimum of the range.
    ptype: str
    values: ''
- second_level:
    default: '10'
    desc: Specifies the second value for the ``level`` filter. If ``level`` is "thickness" this must
      be a pressure value given in hPa at the top of the layer. If ``level`` is "descriptor_range" 
      it sets the maximum of the range.
    ptype: str
    values: ''
- occurrence_index:
    default: '1'
    desc: Specifies the numerical index of a ``parameter`` that has several values within one
      observation (e.g. cloud amount on different levels or water temperature at
      different depths). Available if ``level`` is set to "occurrence".
    ptype: number
    values: ''
- observation_types:
    default: '-1'
    desc: Specifies the numerical code or text string for the desired observation
      type. 
    ptype: number or str or list of these
    values: ''
- observation_subtypes:
    default: '-1'
    desc: Specifies the numerical code or text string for the desired observation
      subtype. Note that institutions are free to define their own subtypes
      hence these are not an international standard.
    ptype: num or str or list of these
    values: ''
- date_and_time_from:
    default: metadata
    desc: Specifies if date and time should be taken from the BUFR header section ("metadata") or
      from the data section ("data").
    ptype: str
    values: metadata/data
- date:
    default: ''
    desc: >-
      Specifies the observation(s) date in YYYYMMDD format. Relative dates are allowed: e.g. -1 (yesterday). 
      Specifying a value for ``date`` requires setting a value for ``time``.
    ptype: number
    values: ''
- time:
    default: ''
    desc: Specifies the time of the observation(s). The required format is HHMM.
    ptype: number
    values: ''
- resolution_in_mins:
    default: '0'
    desc: Specifies a time window in minutes around the value chosen for ``time``.
    ptype: number
    values: ''
- wmo_blocks:
    default: any
    desc: Specifies a WMO block number, which identify a geographical region. E.g.
      '02' for Sweden and Finland, 16 for Italy and Greece.
    ptype: number or str or list of these
    values: ''
- wmo_stations:
    default: any
    desc: Specifies a list of WMO stations, using the five digit station identifier
      (the first two of which are the WMO block number).
    ptype: number or str or list of these
    values: ''
- location_filter:
    default: none
    desc: Specifies a location filter.
    ptype: str
    values: none/area/line
- area:
    default: '60/-12/50/3'
    desc: Specifies the coordinates of the area of interest in the form of [North, West, South, East]. 
      Enabled when ``location_filter`` is "area".
    ptype: list
    values: ''
- line:
    default: '40/-5/60/25'
    desc: Specifies the coordinates of a transect line in [lat1, lon1, lat2, lon2] format. 
      This will filter all the observations close enough to the line - how close is defined
      by ``delta_in_km``. Enabled when ``location_filter`` is "line".
    ptype: list
    values: ''
- delta_in_km:
    default: '50'
    desc: Specifies the width of the cross section line in km defined in ``line``.
    ptype: number
    values: ''
- custom_filter:
    default: none
    desc: Allows to filter observations by the value of a ``custom_parameter``.
      You can select observations equal to a value (option "value")
      or within/outside a given range of values (options "range" or "exclude").
    ptype: str
    values: none/value/range/exclude
- custom_parameter:
    default: '01007'
    desc: Specifies the parameter for ``custom_filter``. Use an ecCodes BUFR keyname here. For
      compatibility a BUFR descriptors can still be given here but their usage is
      discouraged. 
    ptype: str
    values: ''
- custom_values:
    default: '200'
    desc: Specifies the value condition for ``custom_filter``. You may specify
      a list of values here. If ``custom_filter`` is "range" or "exclude" you
      need to specify a list with two elements here.
    ptype: number or list[number]
    values: ''
- fail_on_error:
    default: 'yes'
    desc: ''
    ptype: str
    values: yes/no
- fail_on_empty_output:
    default: 'no'
    desc: Controls the behaviour when the resulting output is empty. If it is set to "no"
      :func:`obs_filter` will return None, while if the value is "yes" the Python script 
      running :func:`obs_filter` will abort.
    ptype: str
    values: yes/no
