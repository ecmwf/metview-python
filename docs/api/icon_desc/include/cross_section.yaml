- line:
    default: '0/-180/0/180'
    desc: |-
      Specifies the coordinates of a transect line along which the cross-section is calculated in [lat1, lon1, lat2, lon2] format. The cross section is calculated from a set of geographical points taken along the input transect line. The point selection takes into consideration the resolution of the data and assures that a minimum of 64 points will be used. Note that it is possible to define a line through either poles by describing the lineâ€™s coordinates as follows:

      * First, when specifying the latitudes of the two points, imagine that the latitude values go above 90 when you cross the North Pole and below -90 when you cross the South Pole.
      * Next, if you wish a straight line, ensure that the two longitude values are the same.

      E.g. a straight-line cross-section going through the South pole from 60S/25E to 60S/155W can be specified as -60/25/-120/25. Here the fact that one of the latitude values is below -90 indicates to Metview that the cross-section will go through the South Pole. Since the two longitude values are identical a straight line will be defined. If the longitudes were different two curves would be used (one to the pole and another one away from it).
    ptype: list[number]
    values: ''
- wind_parallel:
    default: 'on'
    desc: When this option is "on", the wind components are projected onto the cross
      section plane. For 2D wind the result is a signed scalar data (a contour plot).
      When 3D wind data are available a vector plot is produced with the vertical
      component scaled/computed as specified in parameter ``w_wind_scaling_factor_mode``.
    ptype: str
    values: on/off
- wind_perpendicular:
    default: 'off'
    desc: When this option is "on", the wind components are projected onto the normal
      vector of the cross section plane. The result is a signed scalar data (a contour
      plot). ``wind_perpendicular`` cannot be set to "on" if ``wind_parallel``
      is also "on".
    ptype: str
    values: on/off
- wind_intensity:
    default: 'off'
    desc: |-
      When this option is "on" the result depends on other settings:

      * When both ``wind_parallel`` and ``wind_perpendicular`` are "off", the result is the length of the 2D/3D wind vector at the cross section plane.
      * When ``wind_parallel`` is "on", the result is the absolute value of the projected wind onto the cross section plane.
      * When ``wind_perpendicular`` is "on", the result is the absolute value of the wind projected onto the normal vector of the cross section plane.
    ptype: str
    values: on/off
- lnsp_param:
    default: '152'
    desc: Specifies the ecCodes paramId used to identify the Logarithm of Surface Pressure (LNSP) in the input data.
    ptype: number
    values: ''
- u_wind_param:
    default: '131'
    desc: Specifies the ecCodes paramId used to identify the U wind component in the input data.
    ptype: number
    values: ''
- v_wind_param:
    default: '132'
    desc: Specifies the ecCodes paramId used to identify the V wind component in the input data. 
    ptype: number
    values: ''
- w_wind_param:
    default: '135'
    desc: Specifies the ecCodes paramId used to identify the vertical wind component in the input data. The default
      value is 135 i.e. pressure velocity in Pa/s (as used by ECMWF).
    ptype: number
    values: ''
- t_param:
    default: '130'
    desc: Specifies the ecCodes paramId used to identify the temperature in the input data. Used in the vertical
      wind computations when ``w_wind_scaling_factor_mode`` is set to "compute".
    ptype: number
    values: ''
- horizontal_point_mode:
    default: interpolate
    desc: Specifies how the geographical points along the input transect ``line``
      will be computed. Setting this option to "interpolate" will create a regular set of interpolated geographical
      points along the transect ``line``. Setting this option to "nearest_gridpoint"
      will instead select the nearest points from the data.
    ptype: str
    values: interpolate/nearest_gridpoint
- vertical_coordinates:
    default: default
    desc: Setting this option to "user" will enable the use of general height-based
      coordinates. In this mode, additional GRIB fields should be supplied (one per
      level) where the values of the grid points represent the heights of their locations.
    ptype: str
    values: default/user
- vertical_coordinate_param:
    default: ''
    desc: Specifies the ecCodes paramId of the general height-based coordinates if
      ``vertical_coordinates`` is set to "user".
    ptype: str
    values: ''
- w_wind_scaling_factor_mode:
    default: automatic
    desc: |-
      Specifies the representation of the vertical wind component (defined as ``w_wind_param`` ). The valid values are as follows:
      
      * "automatic": the values are scaled by a factor based on the geographical area, the top/bottom pressure levels and the size of the plot window. This option was kept to provide compatibility with earlier Metview versions.
      * "user": the values are scaled by the factor defined via parameter ``w_wind_scaling_factor``.
      * "compute": in this mode, supposing that ``w_wind_param`` defines the the pressure velocity, the vertical wind component in m/s is computed by :func:`w_from_omega`. To make it work, the input data have to be specified either on pressure levels or on model levels together with LNSP. The temperature paramId is defined by ``t_param``. When temperature is not available, the computations will use a constant temperature  value of 273.16 K. Having computed the vertical wind component, a scaling with the factor defined by ``w_wind_scaling_factor`` is still applied to the resulting values.
    ptype: str
    values: automatic/user/compute
- w_wind_scaling_factor:
    default: '-100'
    desc: Specifies the vertical wind scaling factor if ``w_wind_scaling_factor_mode``
      is set to 'user" or "compute". 
    ptype: number
    values: ''
- level_selection_type:
    default: from_data
    desc: |-
      Specifies the method to define the output pressure levels when converting model level data to pressure levels. The possible values are:

      * "from_data": first computes the absolute bottom pressure level from the data, next for each model level computes the average pressure along the cross section line and uses it as the vertical pressure co-ordinate for that level, finally computes extra levels at the bottom by adding an offset (10 hPa) until it reaches the bottom pressure level. This will avoid blank areas in the plot near the orography line.
      * "count": calculates the output pressure levels by taking into account the bottom and top pressure levels (``bottom_level`` and ``top_level``) and the given number of levels (``level_count``). The computed levels will be evenly spaced on either a linear or a logarithmic scale depending on the value of ``vertical_scaling``.
      * "level_list": use the given list of pressure levels in ``level_list``
    ptype: str
    values: from_data/count/level_list
- level_list:
    default: '0.01'
    desc: Specifies the list of output pressure levels. Only available if ``level_selection_type``
      is set to "level_list".
    ptype: number or list[number]
    values: ''
- level_count:
    default: '100'
    desc: Specifies the number of output pressure levels if ``level_selection_type``
      is set to "count".
    ptype: number
    values: ''
- vertical_scaling:
    default: linear
    desc: Specifies the type of the vertical_axis.
    ptype: str
    values: linear/log
