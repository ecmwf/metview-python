NetCDF object
******************

.. py:class:: NetCDF

   Metview includes some functionality on NetCDF data. In addition to taking NetCDF as input,
   Metview generates NetCDF data in some contexts, notably when data slices are generated by
   modules such as :py:meth:`mcross_sect` and :py:meth:`mhovmoeller_area`.


Construction
############

   A NetCDF file can be read from disk using :func:`read`:

   .. code-block:: python

      import metview as mv

      nc = mv.read("mydata.nc")

Examining NetCDF contents
#########################

   If Metview has been built with its graphical user interface, the contents of a NetCDF file
   can be inspected with the NetCdf Examiner, which can be started up from the user interface
   (right-click examine on the icon).

Visualisation
#############

   Direct visualisation of NetCDF is not available in Metview but it is implemented via the
   NetCDF Visualiser icon (:py:meth:`netcdf_visualiser`). With this we can specify the
   view type, the variable and the dimensions (with slicing) to generate the actual plot.
   Visualisation is supported both on maps and xy-charts for scalar and vector data, as well.

Processing NetCDF data
######################

How operators and functions work on NetCDF
++++++++++++++++++++++++++++++++++++++++++

   NetCDF files can contain a wide variety of data. They can contain a number of data units, e.g.
   a set of cross section plots, a set of 2D geographical grids, a set of time series or vertical
   profiles, etc. Each component of a set is stored in the netCDF file as a separate netcdf variable.
   The handling of and computations with netCDF files are based on the concept of current variable.

   Out of the N variables contained in a netCDF file, one is always set to be the current variable.
   Functions and operators acting upon the netcdf file will act only upon the current variable .

   In general, users set the current variable (which by default is the first variable in the file)
   to one of those contained in the file and can then apply a number of functions and operators to them:

   .. code-block:: python

      setcurrent(netcdf1, "rh") # use the variable called "rh" in this netCDF file
      setcurrent(netcdf2, 2) # use the 2nd variable in this netCDF file
      netcdf3 = netcdf1 op netcdf2
      out = function(netcdf1, ...)

   However, because functions and operators work only on the current variable, when the netCDF contains
   more than one variable (a multi-variable netCDF), special care must be taken when you need the
   operator/function to apply to all variables - this is detailed later in this page.

   When two netCDF variables are involved, both files have to have the same number of data points in
   each current variable, as an operation between two netCDFs is carried out between each pair of
   corresponding data values. Alternatively, an operation can be between a NetCDF variable and a
   constant, or a function can work entirely on a single NetCDF variable. Examples of these are shown here:

   .. code-block:: python

      nc3 = nc1 + nc2   # current variables of nc1 and nc2 are used
      nc2 = nc1 + 10.8  # current variable of nc1 is used
      nc2 = nc1.sqrt()  # current variable of nc1 is used



.. include:: /gen_files/toc/netcdf_obj.rst